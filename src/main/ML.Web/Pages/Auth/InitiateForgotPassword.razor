@page "/forgot-password"
@layout AuthLayout
@using ML.Web.Models
@using ML.Web.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@inject IMediaLocatorHttpClient HttpClient
@inject NavigationManager Navigation
@attribute [AllowAnonymous]

<PageTitle>Forgot Password - MediaLocator</PageTitle>

<div class="login-container">
    <div class="logo-container">
        <img src="https://i.imgur.com/4wSDxWP.png" alt="MediaLocator Logo" class="logo" />
    </div>
    <div class="login-header">Reset Your Password</div>
    
    @if (isSuccess)
    {
        <div class="success-container">
            <div class="success-icon">✓</div>
            <div class="success-message">
                <div class="success-title">Password reset email sent!</div>
                <p>If an account exists with this email address, you'll receive instructions to reset your password.</p>
                <p>Please check your inbox and follow the instructions in the email.</p>
            </div>
        </div>
        
        <div class="back-to-login">
            <a href="login" class="login-button">Return to Login</a>
        </div>
    }
    else
    {
        <p class="instruction-text">Enter your email address below and we'll send you instructions to reset your password.</p>
        
        <EditForm Model="resetModel" OnValidSubmit="HandleForgotPassword" class="login-form">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-container">
                    <div class="error-icon">⚠️</div>
                    <div class="error-message">
                        <div class="error-title">@errorMessage</div>
                        @if (errorDetails != null && errorDetails.Any())
                        {
                            <ul class="error-details">
                                @foreach (var detail in errorDetails)
                                {
                                    <li>@detail</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            }
            
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" @bind-Value="resetModel.Email" class="form-control" />
                <ValidationMessage For="@(() => resetModel.Email)" />
            </div>

            <button type="submit" class="login-button" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Processing...</span>
                }
                else
                {
                    <span>Send Reset Instructions</span>
                }
            </button>
        </EditForm>

        <div class="login-footer">
            <a href="login">Back to Login</a>
        </div>
    }
</div>

@code {
    private ForgotPasswordModel resetModel = new();
    private bool isLoading = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;
    private List<string> errorDetails = [];
    
    private async Task HandleForgotPassword()
    {
        isLoading = true;
        errorDetails.Clear();
        errorMessage = string.Empty;
        
        try
        {
            var request = new InitiatePasswordResetRequest
            {
                EmailAddress = resetModel.Email
            };
            
            var result = await HttpClient.PostAsync<ApiResult, InitiatePasswordResetRequest>(
                "api/v1/account/password-reset/initial", 
                request);
                
            if (result.Succeeded)
            {
                isSuccess = true;
            }
            else
            {
                errorMessage = result.Message ?? "Failed to process your request. Please try again.";
                errorDetails = result.Errors?.ToList() ?? new List<string>();
            }
        }
        catch (HttpRequestException ex)
        {
            if (ex.Data.Contains("ApiErrorResponse"))
            {
                var errorData = ex.Data["ApiErrorResponse"] as ErrorResponse;
                if (errorData != null)
                {
                    errorMessage = errorData.Message ?? "Failed to send password reset email.";
                    errorDetails = errorData.Errors?.ToList() ?? new List<string>();
                }
            }
            else
            {
                errorMessage = "Failed to connect to the server. Please check your internet connection and try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }
}