@page "/reset-password"
@page "/reset-password/{*path}"
@layout AuthLayout
@using ML.Web.Models
@using ML.Web.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject NavigationManager Navigation
@inject IMediaLocatorHttpClient HttpClient

<PageTitle>Reset Password - MediaLocator</PageTitle>

<div class="login-container">
    <div class="logo-container">
        <img src="https://i.imgur.com/4wSDxWP.png" alt="MediaLocator Logo" class="logo" />
    </div>
    <div class="login-header">@pageTitle</div>

    @if (isLoading)
    {
        <div class="verification-progress">
            <div class="progress-container">
                <div class="progress-bar" style="width: @progress%"></div>
            </div>
            <div class="progress-text">@progressText</div>
        </div>
    }
    else if (isSuccess)
    {
        <div class="verification-success">
            <div class="verification-icon">✅</div>
            <h3>Password Reset Successfully!</h3>
            <p>Your password has been updated. You can now sign in with your new password.</p>
            <p class="redirect-message">Taking you to the login page in @redirectCountdown seconds...</p>
            <button class="login-button" @onclick="RedirectToLogin">
                Sign In Now
            </button>
        </div>
    }
    else if (isError)
    {
        <div class="verification-error">
            <div class="verification-icon">❌</div>
            <h3>Password Reset Failed</h3>
            <p>We couldn't reset your password. This might happen if:</p>
            <ul>
                <li>The reset link has expired</li>
                <li>The reset link was already used</li>
                <li>There was a technical issue with the reset process</li>
            </ul>
            <p class="error-message">@errorMessage</p>
            <div class="verification-actions">
                <button class="login-button" @onclick="RedirectToForgotPassword">
                    Request New Reset Link
                </button>
                <a href="mailto:support@medialocator.com" class="support-link">
                    Contact Support
                </a>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="resetModel" OnValidSubmit="HandlePasswordReset" class="login-form">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(formError))
            {
                <div class="error-container">
                    <div class="error-icon">⚠️</div>
                    <div class="error-message">
                        <div class="error-title">@formError</div>
                        @if (errorDetails != null && errorDetails.Any())
                        {
                            <ul class="error-details">
                                @foreach (var detail in errorDetails)
                                {
                                    <li>@detail</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            }
            
            <div class="form-group">
                <label for="password">New Password</label>
                <InputText id="password" type="password" @bind-Value="resetModel.Password" class="form-control" />
                <ValidationMessage For="@(() => resetModel.Password)" />
                <div class="form-text">Password must be at least 12 characters and include uppercase letter, lowercase letter, number, and special character.</div>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <InputText id="confirmPassword" type="password" @bind-Value="resetModel.ConfirmPassword" class="form-control" />
                <ValidationMessage For="@(() => resetModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="login-button" disabled="@isFormSubmitting">
                @if (isFormSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Processing...</span>
                }
                else
                {
                    <span>Reset Password</span>
                }
            </button>
        </EditForm>
        
        <div class="login-footer">
            <a href="login">Back to Login</a>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Path { get; set; }

    private bool isLoading = false;
    private bool isSuccess = false;
    private bool isError = false;
    private bool isFormSubmitting = false;
    private string errorMessage = string.Empty;
    private string formError = string.Empty;
    private List<string> errorDetails = [];
    private int progress = 0;
    private string progressText = "Resetting your password...";
    private string pageTitle = "Create New Password";
    private int redirectCountdown = 5;
    private System.Threading.Timer? progressTimer;
    private System.Threading.Timer? redirectTimer;
    private string? token;
    private string? userId;
    
    private PasswordResetModel resetModel = new();

    protected override void OnInitialized()
    {
        ParseParameters();
        
        if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(userId))
        {
            isError = true;
            errorMessage = "Invalid or missing reset link parameters. Please request a new password reset link.";
        }
    }

    private void ParseParameters()
    {
        if (!string.IsNullOrEmpty(Path))
        {
            var parts = Path.Split('&');
            if (parts.Length >= 2)
            {
                userId = parts[0];
                token = parts[1];
                return;
            }
        }
        
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        
        if (uri.Query.Contains("userId") && uri.Query.Contains("token"))
        {
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            userId = query["userId"];
            token = query["token"];
        }
    }

    private async Task HandlePasswordReset()
    {
        if (resetModel.Password != resetModel.ConfirmPassword)
        {
            formError = "Passwords do not match";
            return;
        }
        
        formError = string.Empty;
        errorDetails.Clear();
        isFormSubmitting = true;
        
        try
        {
            PasswordResetRequest request = new()
            {
                UserId = userId,
                ResetToken = token,
                NewPassword = resetModel.Password,
                ConfirmPassword = resetModel.ConfirmPassword
            };
            
            // Start the loading animation
            isFormSubmitting = false;
            isLoading = true;
            progressTimer = new System.Threading.Timer(UpdateProgress, null, 0, 100);
            StateHasChanged();
            
            var result = await HttpClient.PostAsync<ApiResult, PasswordResetRequest>(
                "api/v1/account/password-reset", 
                request);
                
            if (result.Succeeded)
            {
                progress = 90;
                StateHasChanged();

                await Task.Delay(1000);
                progress = 100;
                progressText = "Password reset complete!";
                StateHasChanged();

                await Task.Delay(500);
                
                isSuccess = true;
                isLoading = false;
                StartRedirectCountdown();
            }
            else
            {
                ShowError(result.Message ?? "Password reset failed. Please contact support.");
                errorDetails = result.Errors?.ToList() ?? [];
            }
        }
        catch (HttpRequestException ex)
        {
            if (ex.Data.Contains("ApiErrorResponse"))
            {
                var errorData = ex.Data["ApiErrorResponse"] as ErrorResponse;
                if (errorData != null)
                {
                    ShowError(errorData.Message ?? "Password reset failed. Please contact support.");
                    errorDetails = errorData.Errors?.ToList() ?? [];
                }
            }
            else
            {
                ShowError("Password reset failed. Please check your network connection and try again.");
            }
        }
        catch (Exception ex)
        {
            ShowError("An unexpected error occurred. Please contact support.");
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isFormSubmitting = false;
        }
    }
    
    private void UpdateProgress(object? state)
    {
        if (progress < 85 && isLoading && !isSuccess && !isError)
        {
            progress += 1;
            
            if (progress < 30)
            {
                progressText = "Validating your reset request...";
            }
            else if (progress < 60)
            {
                progressText = "Updating your password...";
            }
            else if (progress < 85)
            {
                progressText = "Almost there! Finalizing changes...";
            }
            
            InvokeAsync(StateHasChanged);
        }
        else if (progress >= 100 || isSuccess || isError)
        {
            progressTimer?.Change(Timeout.Infinite, Timeout.Infinite);
            progressTimer?.Dispose();
            progressTimer = null;
        }
    }

    private void ShowError(string message)
    {
        progressTimer?.Change(Timeout.Infinite, Timeout.Infinite);
        progressTimer?.Dispose();
        progressTimer = null;
        
        errorMessage = message;
        isError = true;
        isLoading = false;
        isSuccess = false;
        pageTitle = "Reset Failed";
    }

    private void StartRedirectCountdown()
    {
        redirectTimer = new System.Threading.Timer(UpdateRedirectCountdown, null, 0, 1000);
    }

    private void UpdateRedirectCountdown(object? state)
    {
        if (redirectCountdown > 0)
        {
            redirectCountdown--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            redirectTimer?.Change(Timeout.Infinite, Timeout.Infinite);
            redirectTimer?.Dispose();
            redirectTimer = null;
            
            InvokeAsync(RedirectToLogin);
        }
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    
    private void RedirectToForgotPassword()
    {
        Navigation.NavigateTo("/forgot-password");
    }

    public void Dispose()
    {
        progressTimer?.Dispose();
        redirectTimer?.Dispose();
    }
}