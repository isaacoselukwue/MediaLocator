@page "/signup/verify"
@page "/signup/verify/{*path}"
@layout AuthLayout
@using ML.Web.Models
@using ML.Web.Services
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject NavigationManager Navigation
@inject IMediaLocatorHttpClient HttpClient

<PageTitle>Verify Account - MediaLocator</PageTitle>

<div class="login-container verification-container">
    <div class="logo-container">
        <img src="https://i.imgur.com/4wSDxWP.png" alt="MediaLocator Logo" class="logo" />
    </div>
    <div class="login-header">@pageTitle</div>

    <div class="verification-content">
        @if (isLoading)
        {
            <div class="verification-progress">
                <div class="progress-container">
                    <div class="progress-bar" style="width: @progress%"></div>
                </div>
                <div class="progress-text">@progressText</div>
            </div>
        }
        else if (isSuccess)
        {
            <div class="verification-success">
                <div class="verification-icon">✅</div>
                <h3>Account Verified Successfully!</h3>
                <p>Your account has been activated. You can now sign in and start using MediaLocator.</p>
                <p class="redirect-message">Taking you to the login page in @redirectCountdown seconds...</p>
                <button class="login-button" @onclick="RedirectToLogin">
                    Sign In Now
                </button>
            </div>
        }
        else if (isError)
        {
            <div class="verification-error">
                <div class="verification-icon">❌</div>
                <h3>Verification Failed</h3>
                <p>We couldn't verify your account. This might happen if:</p>
                <ul>
                    <li>The verification link has expired</li>
                    <li>The account has already been verified</li>
                    <li>There was a technical issue with the verification process</li>
                </ul>
                <p class="error-message">@errorMessage</p>
                <div class="verification-actions">
                    <button class="login-button" @onclick="RedirectToLogin">
                        Try Signing In
                    </button>
                    <a href="mailto:support@medialocator.com" class="support-link">
                        Contact Support
                    </a>
                </div>
            </div>
        }
        else
        {
            <div class="verification-start">
                <p>Please wait while we verify your account...</p>
                <button class="login-button" @onclick="StartVerification">
                    Start Verification
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Path { get; set; }

    private bool isLoading = false;
    private bool isSuccess = false;
    private bool isError = false;
    private string errorMessage = string.Empty;
    private int progress = 0;
    private string progressText = "Starting verification process...";
    private string pageTitle = "Verifying Your Account";
    private int redirectCountdown = 5;
    private System.Threading.Timer? progressTimer;
    private System.Threading.Timer? redirectTimer;
    private string? token;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        ParseParameters();
        
        if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(userId))
        {
            await StartVerification();
        }
    }

    private void ParseParameters()
    {
        if (!string.IsNullOrEmpty(Path))
        {
            var parts = Path.Split('&');
            if (parts.Length >= 2)
            {
                token = parts[0];
                userId = parts[1];
                return;
            }
        }
        
    }

    private async Task StartVerification()
    {
        isLoading = true;
        isError = false;
        isSuccess = false;
        progress = 0;
        
        progressTimer = new System.Threading.Timer(UpdateProgress, null, 0, 100);

        try
        {
            await Task.Delay(1000);
            
            SignupVerificationRequest verificationRequest = new()
            {
                UserId = userId ?? string.Empty,
                ActivationToken = token ?? string.Empty
            };

            var result = await HttpClient.PostAsync<ApiResult, SignupVerificationRequest>(
                "api/v1/authentication/signup/verify", 
                verificationRequest);

            if (result.Succeeded)
            {
                progress = 90;
                StateHasChanged();

                await Task.Delay(1000);
                progress = 100;
                progressText = "Account verification complete!";
                StateHasChanged();

                await Task.Delay(500);
                
                isSuccess = true;
                isLoading = false;
                StartRedirectCountdown();
            }
            else
            {
                ShowError(result.Message ?? "Verification failed. Please contact support.");
            }
        }
        catch (HttpRequestException ex)
        {
            if (ex.Data.Contains("ApiErrorResponse"))
            {
                var errorData = ex.Data["ApiErrorResponse"] as ErrorResponse;
                ShowError(errorData?.Message ?? "Verification failed. Please contact support.");
            }
            else
            {
                ShowError($"Verification failed. Please check your network connection and try again.");
            }
        }
        catch (Exception ex)
        {
            ShowError("An unexpected error occurred. Please contact support." + ex.Message);
        }
    }

    private void UpdateProgress(object? state)
    {
        if (progress < 85 && isLoading && !isSuccess && !isError)
        {
            progress += 1;
            
            if (progress < 30)
            {
                progressText = "Verifying your account information...";
            }
            else if (progress < 60)
            {
                progressText = "Setting up your profile...";
            }
            else if (progress < 85)
            {
                progressText = "Almost there! Finalizing your account...";
            }
            
            InvokeAsync(StateHasChanged);
        }
        else if (progress >= 100 || isSuccess || isError)
        {
            progressTimer?.Change(Timeout.Infinite, Timeout.Infinite);
            progressTimer?.Dispose();
            progressTimer = null;
        }
    }

    private void ShowError(string message)
    {
        progressTimer?.Change(Timeout.Infinite, Timeout.Infinite);
        progressTimer?.Dispose();
        progressTimer = null;
        
        errorMessage = message;
        isError = true;
        isLoading = false;
        isSuccess = false;
        pageTitle = "Verification Failed";
    }

    private void StartRedirectCountdown()
    {
        redirectTimer = new System.Threading.Timer(UpdateRedirectCountdown, null, 0, 1000);
    }

    private void UpdateRedirectCountdown(object? state)
    {
        if (redirectCountdown > 0)
        {
            redirectCountdown--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            redirectTimer?.Change(Timeout.Infinite, Timeout.Infinite);
            redirectTimer?.Dispose();
            redirectTimer = null;
            
            InvokeAsync(RedirectToLogin);
        }
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        progressTimer?.Dispose();
        redirectTimer?.Dispose();
    }
}